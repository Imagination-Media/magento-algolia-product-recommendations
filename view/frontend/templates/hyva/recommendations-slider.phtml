<?php

/**
 * AlgoliaProductRecommendations
 *
 * Algolia product recommendations UI
 *
 * @see https://www.algolia.com/doc/api-client/methods/recommend/?client=javascript
 * @see https://www.algolia.com/doc/api-reference/api-methods/get-recommendations/?client=javascript
 *
 * @package ImaginationMedia\AlgoliaProductRecommendations
 * @author Vasilii Burlacu <vasilii@imaginationmedia.com>
 * @copyright Copyright (c) 2022 Imagination Media (https://www.imaginationmedia.com/)
 * @license https://opensource.org/licenses/OSL-3.0.php Open Software License 3.0
 *
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use ImaginationMedia\AlgoliaProductRecommendations\ViewModel\RecommendationsViewModel;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var RecommendationsViewModel $recommendationsViewModel */
$recommendationsViewModel = $block->getData('recommendationsViewModel');
$uniqueId = $block->getData('uniqueId');

if (!$recommendationsViewModel->isEnabled()) {
    return;
}

/** @var HeroiconsSolid $heroicons */
$heroicons = $viewModels->require(HeroiconsSolid::class);
?>

<?= $block->getChildHtml('js') ?>

<script>
    /*
        `initSliderComponent` component originally implemented at Hyva Theme
        and copied over here to make it work with AlpineJS data & customise slider settings.
        @see vendor/hyva-themes/magento2-default-theme/Magento_Theme/templates/elements/slider-php.phtml:85
     */
    function initSliderComponent() {
        return {
            ...algoliaRecommendations(),
            ...algoliaRecommendationsFor<?= $escaper->escapeJs($uniqueId) ?>(),
            active: 0,
            itemCount: 0,
            pageSize: 5,
            pageFillers: 0,

            sliderInit() {
                /**
                 * Set slider items count from Algolia product recommendations
                 * And trigger initial page size calculation
                 */
                this.$watch('nbHits', newValue => {
                    this.itemCount = newValue;
                    this.$nextTick(() => this.calcPageSize())
                });
            },

            getSlider() {
                return this.$el.querySelector('.js_slides');
            },

            calcPageSize() {
                const slider = this.getSlider();
                if (slider) {
                    this.itemCount = slider.querySelectorAll('.js_slide').length;
                    this.pageSize = Math.round(slider.clientWidth / slider.querySelector('.js_slide').clientWidth);
                    this.pageFillers = (
                        this.pageSize * Math.ceil(this.itemCount / this.pageSize)
                    ) - this.itemCount;
                }
            },

            calcActive() {
                const slider = this.getSlider();
                if (slider) {
                    const sliderItems = this.itemCount + this.pageFillers;
                    const calculatedActiveSlide = slider.scrollLeft / (slider.scrollWidth / sliderItems);
                    this.active = Math.round(calculatedActiveSlide / this.pageSize) * this.pageSize;
                }
            },

            scrollPrevious() {
                this.scrollTo(this.active - this.pageSize);
            },

            scrollNext() {
                this.scrollTo(this.active + this.pageSize);
            },

            scrollTo(idx) {
                const slider = this.getSlider();
                if (slider) {
                    const slideWidth = slider.scrollWidth / (this.itemCount + this.pageFillers);
                    slider.scrollLeft = Math.floor(slideWidth) * idx;
                    this.active = idx;
                }
            },

            eventListeners: {
                ['@resize.window.debounce']() {
                    this.calcPageSize();
                    this.$nextTick(() => this.calcActive());
                }
            }
        }
    }
</script>

<div x-data="initSliderComponent()"
     x-spread="eventListeners"
     x-cloak
     x-init="init(); sliderInit();"
     x-show="nbHits"
>
    <div class="flex items-center justify-between mb-8 lg:mb-10">
        <h4 class="text-xl font-semibold my-0"><?= $escaper->escapeHtml(__($block->getData('title'))) ?></h4>

        <template x-if="itemCount > pageSize">
            <div class="hidden sm:flex lg:items-center lg:justify-center sm:gap-5 lg:gap-2">
                <button
                    aria-label="<?= $escaper->escapeHtml(__('Previous')) ?>"
                    tabindex="-1"
                    class="text-black rounded-full outline-none focus:outline-none flex-none"
                    :class="{ 'opacity-25 pointer-events-none' : active === 0 }"
                    @click="scrollPrevious">
                    <?= $heroicons->arrowNarrowLeftHtml("w- h-", 16, 16) ?>
                </button>

                <button
                    aria-label="<?= $escaper->escapeHtml(__('Next')) ?>"
                    tabindex="-1"
                    class="text-black rounded-full outline-none focus:outline-none flex-none"
                    :class="{ 'opacity-25 pointer-events-none' : active >= itemCount-pageSize }"
                    @click="scrollNext">
                    <?= $heroicons->arrowNarrowRightHtml("w- h-", 16, 16) ?>
                </button>
            </div>
        </template>
    </div>

    <template x-if="nbHits">
        <div class="-mr-5 sm:mr-auto">
            <div class="relative flex flex-nowrap w-full overflow-auto transition-all js_slides snap"
                 @scroll.debounce="calcActive"
            >
                <template x-for="(hit, hitIndex) in hits" :key="hitIndex">
                    <div class="flex flex-shrink-0 w-10/12 js_slide sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5">
                        <?= $block->getChildHtml('hit') ?>
                    </div>
                </template>
                <template x-for="pageFillerIndex in new Array(pageFillers).fill(null)" :key="pageFillerIndex">
                    <div class="js_dummy_slide w-10/12 sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5 flex-none"></div>
                </template>
            </div>
        </div>
    </template>
</div>
